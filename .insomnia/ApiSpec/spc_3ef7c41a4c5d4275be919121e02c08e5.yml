_id: spc_3ef7c41a4c5d4275be919121e02c08e5
type: ApiSpec
parentId: wrk_ca7ed526c23e4b838356ae878a46b379
modified: 1669467699753
created: 1666160582099
fileName: Patres API
contents: >-
  openapi: 3.0.0

  info:
    description: "This is a sample server Petstore server.  You can find out more about
      Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net,
      #swagger](http://swagger.io/irc/).  For this sample, you can use the api key
      `special-key` to test the authorization filters."
    version: 1.0.2
    title: Schoenstatt Fathers API
    contact:
      email: webmaster@schoenstatt-fathers.link
    license:
      name: Apache 2.0
      url: http://www.apache.org/licenses/LICENSE-2.0.html
  tags:
    - name: official community
      description: territories, filiations and houses
    - name: free community
      description: courses and generations
    - name: user
      description: Operations about user
    - name: bulletin board
      description: a place to post links and information for general use
    - name: photo gallery
      description: a collection of user-submitted photos for cultivation of spirit
    - name: roles and assignments
      description: internal community jobs
    - name: auth
      description: authentication
  paths:
    /photo-gallery:
      post:
        tags:
          - photo gallery
        summary: Submit a new photo to the gallery
        description: ""
        operationId: createGalleryPhoto
        requestBody:
          $ref: "#/components/requestBodies/PhotoGallerySubmit"
        responses:
          "405":
            description: Invalid input
      put:
        tags:
          - photo gallery
        summary: Update the caption of a gallery photo
        description: ""
        operationId: updateGalleryPhoto
        requestBody:
          $ref: "#/components/requestBodies/PhotoGalleryUpdateCaption"
        responses:
          "400":
            description: Invalid request body or caption
          "403":
            description: Unauthorized
          "404":
            description: Photo not found
          "405":
            description: Validation exception
  #   /pet/findByStatus:

  #     get:

  #       tags:

  #         - pet

  #       summary: Finds Pets by status

  #       description: Multiple status values can be provided with comma separated strings

  #       operationId: findPetsByStatus

  #       parameters:

  #         - name: status

  #           in: query

  #           description: Status values that need to be considered for filter

  #           required: true

  #           explode: true

  #           schema:

  #             type: array

  #             items:

  #               type: string

  #               enum:

  #                 - available

  #                 - pending

  #                 - sold

  #               default: available

  #       responses:

  #         "200":

  #           description: successful operation

  #           content:

  #             application/xml:

  #               schema:

  #                 type: array

  #                 items:

  #                   $ref: "#/components/schemas/Pet"

  #             application/json:

  #               schema:

  #                 type: array

  #                 items:

  #                   $ref: "#/components/schemas/Pet"

  #         "400":

  #           description: Invalid status value

  #   /pet/findByTags:

  #     get:

  #       tags:

  #         - pet

  #       summary: Finds Pets by tags

  #       description: Multiple tags can be provided with comma separated strings. Use tag1,

  #         tag2, tag3 for testing.

  #       operationId: findPetsByTags

  #       parameters:

  #         - name: tags

  #           in: query

  #           description: Tags to filter by

  #           required: true

  #           explode: true

  #           schema:

  #             type: array

  #             items:

  #               type: string

  #       responses:

  #         "200":

  #           description: successful operation

  #           content:

  #             application/xml:

  #               schema:

  #                 type: array

  #                 items:

  #                   $ref: "#/components/schemas/Pet"

  #             application/json:

  #               schema:

  #                 type: array

  #                 items:

  #                   $ref: "#/components/schemas/Pet"

  #         "400":

  #           description: Invalid tag value

  #       deprecated: true

  #   "/pet/{petId}":

  #     get:

  #       tags:

  #         - pet

  #       summary: Find pet by ID

  #       description: Returns a single pet

  #       operationId: getPetById

  #       parameters:

  #         - name: petId

  #           in: path

  #           description: ID of pet to return

  #           required: true

  #           schema:

  #             type: integer

  #             format: int64

  #       responses:

  #         "200":

  #           description: successful operation

  #           content:

  #             application/xml:

  #               schema:

  #                 $ref: "#/components/schemas/Pet"

  #             application/json:

  #               schema:

  #                 $ref: "#/components/schemas/Pet"

  #         "400":

  #           description: Invalid ID supplied

  #         "404":

  #           description: Pet not found

  #     post:

  #       tags:

  #         - pet

  #       summary: Updates a pet in the store with form data

  #       description: ""

  #       operationId: updatePetWithForm

  #       parameters:

  #         - name: petId

  #           in: path

  #           description: ID of pet that needs to be updated

  #           required: true

  #           schema:

  #             type: integer

  #             format: int64

  #       requestBody:

  #         content:

  #           application/x-www-form-urlencoded:

  #             schema:

  #               type: object

  #               properties:

  #                 name:

  #                   description: Updated name of the pet

  #                   type: string

  #                 status:

  #                   description: Updated status of the pet

  #                   type: string

  #       responses:

  #         "405":

  #           description: Invalid input

  #     delete:

  #       tags:

  #         - pet

  #       summary: Deletes a pet

  #       description: ""

  #       operationId: deletePet

  #       parameters:

  #         - name: api_key

  #           in: header

  #           required: false

  #           schema:

  #             type: string

  #         - name: petId

  #           in: path

  #           description: Pet id to delete

  #           required: true

  #           schema:

  #             type: integer

  #             format: int64

  #       responses:

  #         "400":

  #           description: Invalid ID supplied

  #         "404":

  #           description: Pet not found

  externalDocs:
    description: Find out more about Swagger
    url: https://schoenstatt-fathers.link/api
  servers:
    - url: https://schoenstatt-fathers.link/api/v1
  components:
    requestBodies:
      UserArray:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/User"
        description: List of user object
        required: true
      PhotoGallerySubmit:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GalleryPhotoSubmit"
        required: true
      PhotoGalleryUpdateCaption:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GalleryPhotoSubmit"
        required: true
  #     Pet:

  #       content:

  #         application/json:

  #           schema:

  #             $ref: "#/components/schemas/Pet"

  #         application/xml:

  #           schema:

  #             $ref: "#/components/schemas/Pet"

  #       description: Pet object that needs to be added to the store

  #       required: true
    schemas:
      PhotoGalleryUpdateCaption:
        type: object
        properties:
          caption:
            type: string
            minLength: 1
            maxLength: 140
      GalleryPhotoSubmit:
        type: object
        properties:
          photoData:
            type: string
            format: base64
            maxLength: 140
          caption:
            type: string
            minLength: 1
            maxLength: 140
      Order:
        type: object
        properties:
          id:
            type: integer
            format: int64
          petId:
            type: integer
            format: int64
          quantity:
            type: integer
            format: int32
          shipDate:
            type: string
            format: date-time
          status:
            type: string
            description: Order Status
            enum:
              - placed
              - approved
              - delivered
          complete:
            type: boolean
            default: false
        xml:
          name: Order
      User:
        type: object
        properties:
          id:
            type: integer
            format: int64
          username:
            type: string
          firstName:
            type: string
          lastName:
            type: string
          email:
            type: string
          password:
            type: string
          phone:
            type: string
          userStatus:
            type: integer
            format: int32
            description: User Status
        xml:
          name: User
      Category:
        type: object
        properties:
          id:
            type: integer
            format: int64
          name:
            type: string
        xml:
          name: Category
      Tag:
        type: object
        properties:
          id:
            type: integer
            format: int64
          name:
            type: string
        xml:
          name: Tag
      Pet:
        type: object
        required:
          - name
          - photoUrls
        properties:
          id:
            type: integer
            format: int64
          category:
            $ref: "#/components/schemas/Category"
          name:
            type: string
            example: doggie
          photoUrls:
            type: array
            xml:
              name: photoUrl
              wrapped: true
            items:
              type: string
          tags:
            type: array
            xml:
              name: tag
              wrapped: true
            items:
              $ref: "#/components/schemas/Tag"
          status:
            type: string
            description: pet status in the store
            enum:
              - available
              - pending
              - sold
        xml:
          name: Pet
      ApiResponse:
        type: object
        properties:
          code:
            type: integer
            format: int32
          type:
            type: string
          message:
            type: string
contentType: yaml
